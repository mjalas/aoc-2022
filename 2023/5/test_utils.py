from utils import (
    get_location_for_seed_v2,
    parse_puzzle_input,
    get_destination_for_source,
    get_location_for_seed,
    parse_puzzle_input_v2,
    find_min_and_max_seeds,
    find_min_and_max_for_stage,
)

test_input = [
    "seeds: 79 14 55 13\n",
    "\n",
    "seed-to-soil map:\n",
    "50 98 2\n",
    "52 50 48\n",
    "\n",
    "soil-to-fertilizer map:\n",
    "0 15 37\n",
    "37 52 2\n",
    "39 0 15\n",
    "\n",
    "fertilizer-to-water map:\n",
    "49 53 8\n",
    "0 11 42\n",
    "42 0 7\n",
    "57 7 4\n",
    "\n",
    "water-to-light map:\n",
    "88 18 7\n",
    "18 25 70\n",
    "\n",
    "light-to-temperature map:\n",
    "45 77 23\n",
    "81 45 19\n",
    "68 64 13\n",
    "\n",
    "temperature-to-humidity map:\n",
    "0 69 1\n",
    "1 0 69\n",
    "\n",
    "humidity-to-location map:\n",
    "60 56 37\n",
    "56 93 4\n",
]


def test_parse_input():
    puzzle_data = parse_puzzle_input(puzzle_input=test_input)

    assert puzzle_data.seeds == [79, 14, 55, 13]

    assert puzzle_data.seeds_to_soil == {
        98: 50,
        99: 51,
        50: 52,
        51: 53,
        52: 54,
        53: 55,
        54: 56,
        55: 57,
        56: 58,
        57: 59,
        58: 60,
        59: 61,
        60: 62,
        61: 63,
        62: 64,
        63: 65,
        64: 66,
        65: 67,
        66: 68,
        67: 69,
        68: 70,
        69: 71,
        70: 72,
        71: 73,
        72: 74,
        73: 75,
        74: 76,
        75: 77,
        76: 78,
        77: 79,
        78: 80,
        79: 81,
        80: 82,
        81: 83,
        82: 84,
        83: 85,
        84: 86,
        85: 87,
        86: 88,
        87: 89,
        88: 90,
        89: 91,
        90: 92,
        91: 93,
        92: 94,
        93: 95,
        94: 96,
        95: 97,
        96: 98,
        97: 99,
    }

    assert puzzle_data.soil_to_fertilizer == {
        15: 0,
        16: 1,
        17: 2,
        18: 3,
        19: 4,
        20: 5,
        21: 6,
        22: 7,
        23: 8,
        24: 9,
        25: 10,
        26: 11,
        27: 12,
        28: 13,
        29: 14,
        30: 15,
        31: 16,
        32: 17,
        33: 18,
        34: 19,
        35: 20,
        36: 21,
        37: 22,
        38: 23,
        39: 24,
        40: 25,
        41: 26,
        42: 27,
        43: 28,
        44: 29,
        45: 30,
        46: 31,
        47: 32,
        48: 33,
        49: 34,
        50: 35,
        51: 36,
        52: 37,
        53: 38,
        0: 39,
        1: 40,
        2: 41,
        3: 42,
        4: 43,
        5: 44,
        6: 45,
        7: 46,
        8: 47,
        9: 48,
        10: 49,
        11: 50,
        12: 51,
        13: 52,
        14: 53,
    }

    assert puzzle_data.fertilizer_to_water == {
        53: 49,
        54: 50,
        55: 51,
        56: 52,
        57: 53,
        58: 54,
        59: 55,
        60: 56,
        11: 0,
        12: 1,
        13: 2,
        14: 3,
        15: 4,
        16: 5,
        17: 6,
        18: 7,
        19: 8,
        20: 9,
        21: 10,
        22: 11,
        23: 12,
        24: 13,
        25: 14,
        26: 15,
        27: 16,
        28: 17,
        29: 18,
        30: 19,
        31: 20,
        32: 21,
        33: 22,
        34: 23,
        35: 24,
        36: 25,
        37: 26,
        38: 27,
        39: 28,
        40: 29,
        41: 30,
        42: 31,
        43: 32,
        44: 33,
        45: 34,
        46: 35,
        47: 36,
        48: 37,
        49: 38,
        50: 39,
        51: 40,
        52: 41,
        0: 42,
        1: 43,
        2: 44,
        3: 45,
        4: 46,
        5: 47,
        6: 48,
        7: 57,
        8: 58,
        9: 59,
        10: 60,
    }


def test_map_source_to_destination():
    puzzle_data = parse_puzzle_input(puzzle_input=test_input)
    expected_seed_to_location = {79: 82, 14: 43, 55: 86, 13: 35}

    for seed in puzzle_data.seeds:
        location = get_location_for_seed(puzzle_data=puzzle_data, seed=seed)
        assert (
            location == expected_seed_to_location[seed]
        ), f"Failed location for seed {seed}"


def test_parse_input_2():
    puzzle_data = parse_puzzle_input_v2(puzzle_input=test_input)

    assert puzzle_data.seeds_part_1 == [79, 14, 55, 13]

    assert puzzle_data.seeds_to_soil_as_dict() == {
        98: 50,
        99: 51,
        50: 52,
        51: 53,
        52: 54,
        53: 55,
        54: 56,
        55: 57,
        56: 58,
        57: 59,
        58: 60,
        59: 61,
        60: 62,
        61: 63,
        62: 64,
        63: 65,
        64: 66,
        65: 67,
        66: 68,
        67: 69,
        68: 70,
        69: 71,
        70: 72,
        71: 73,
        72: 74,
        73: 75,
        74: 76,
        75: 77,
        76: 78,
        77: 79,
        78: 80,
        79: 81,
        80: 82,
        81: 83,
        82: 84,
        83: 85,
        84: 86,
        85: 87,
        86: 88,
        87: 89,
        88: 90,
        89: 91,
        90: 92,
        91: 93,
        92: 94,
        93: 95,
        94: 96,
        95: 97,
        96: 98,
        97: 99,
    }

    assert puzzle_data.soil_to_fertilizer_as_dict() == {
        15: 0,
        16: 1,
        17: 2,
        18: 3,
        19: 4,
        20: 5,
        21: 6,
        22: 7,
        23: 8,
        24: 9,
        25: 10,
        26: 11,
        27: 12,
        28: 13,
        29: 14,
        30: 15,
        31: 16,
        32: 17,
        33: 18,
        34: 19,
        35: 20,
        36: 21,
        37: 22,
        38: 23,
        39: 24,
        40: 25,
        41: 26,
        42: 27,
        43: 28,
        44: 29,
        45: 30,
        46: 31,
        47: 32,
        48: 33,
        49: 34,
        50: 35,
        51: 36,
        52: 37,
        53: 38,
        0: 39,
        1: 40,
        2: 41,
        3: 42,
        4: 43,
        5: 44,
        6: 45,
        7: 46,
        8: 47,
        9: 48,
        10: 49,
        11: 50,
        12: 51,
        13: 52,
        14: 53,
    }

    assert puzzle_data.fertilizer_to_water_as_dict() == {
        53: 49,
        54: 50,
        55: 51,
        56: 52,
        57: 53,
        58: 54,
        59: 55,
        60: 56,
        11: 0,
        12: 1,
        13: 2,
        14: 3,
        15: 4,
        16: 5,
        17: 6,
        18: 7,
        19: 8,
        20: 9,
        21: 10,
        22: 11,
        23: 12,
        24: 13,
        25: 14,
        26: 15,
        27: 16,
        28: 17,
        29: 18,
        30: 19,
        31: 20,
        32: 21,
        33: 22,
        34: 23,
        35: 24,
        36: 25,
        37: 26,
        38: 27,
        39: 28,
        40: 29,
        41: 30,
        42: 31,
        43: 32,
        44: 33,
        45: 34,
        46: 35,
        47: 36,
        48: 37,
        49: 38,
        50: 39,
        51: 40,
        52: 41,
        0: 42,
        1: 43,
        2: 44,
        3: 45,
        4: 46,
        5: 47,
        6: 48,
        7: 57,
        8: 58,
        9: 59,
        10: 60,
    }


def test_map_source_to_destination_v2():
    puzzle_data = parse_puzzle_input_v2(puzzle_input=test_input)
    expected_seed_to_location = {79: 82, 14: 43, 55: 86, 13: 35}

    for seed in puzzle_data.seeds_part_1:
        location = get_location_for_seed_v2(puzzle_data=puzzle_data, seed=seed)
        assert (
            location == expected_seed_to_location[seed]
        ), f"Failed location for seed {seed}"


def test_idea():
    with open("2023/5/input.txt", "r") as src:
        puzzle_data = parse_puzzle_input_v2(puzzle_input=src)

    min, max = find_min_and_max_seeds(puzzle_data.seeds_part_2)
    print(f"Seeds: {min=}, {max=}")
    seed_to_soil = find_min_and_max_for_stage(puzzle_data.seeds_to_soil)
    print(f"Seed_to_soil: {seed_to_soil}")
    soil_to_fertilizer = find_min_and_max_for_stage(puzzle_data.soil_to_fertilizer)
    print(f"soil_to_fertilizer: {soil_to_fertilizer}")
    fertilizer_to_water = find_min_and_max_for_stage(puzzle_data.fertilizer_to_water)
    print(f"fertilizer_to_water: {fertilizer_to_water}")
    water_to_light = find_min_and_max_for_stage(puzzle_data.water_to_light)
    print(f"water_to_light: {water_to_light}")
    light_to_temperature = find_min_and_max_for_stage(puzzle_data.light_to_temperature)
    print(f"Slight_to_temperature: {light_to_temperature}")
    temperature_to_humidity = find_min_and_max_for_stage(
        puzzle_data.temperature_to_humidity
    )
    print(f"temperature_to_humidity: {temperature_to_humidity}")
    humidity_to_location = find_min_and_max_for_stage(puzzle_data.humidity_to_location)
    print(f"humidity_to_location: {humidity_to_location}")
